# Golang CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-go/ for more details
version: 2
jobs:
  build-gate:
    docker:
      # specify the version
      - image: circleci/golang:1.14.1

    working_directory: /go/src/github.com/cc4i/go-bumblebee
    steps:
      - checkout

      # specify any bash command here prefixed with `run: `
      - run: 
          name: building & test
          command: |
            which go
            echo $PATH
            cd /go/src/github.com/cc4i/go-bumblebee/src/gate
            ls -F
            go get -v -d
            go test -v -cover ./...

  build-gate-image:
    machine: true
    steps:
      - checkout

      # specify any bash command here prefixed with `run: `
      - run: 
          name: building image & push
          command: |
            cd /home/circleci/project/src/gate
            echo $DOCKER_PASS | docker login --username $DOCKER_USER --password-stdin
            docker build -t $DOCKER_USER/go-bumblebee-gate:$CIRCLE_BRANCH .
            docker push $DOCKER_USER/go-bumblebee-gate:$CIRCLE_BRANCH

  build-air:
    docker:
      # specify the version
      - image: circleci/golang:1.14.1

    working_directory: /go/src/github.com/cc4i/go-bumblebee
    steps:
      - checkout

      # specify any bash command here prefixed with `run: `
      - run: 
          name: building & test
          command: |
            which go
            echo $PATH
            cd /go/src/github.com/cc4i/go-bumblebee/src/air
            ls -F
            go get -v -d
            go test -v -cover ./...

  build-air-image:
    machine: true
    steps:
      - checkout

      # specify any bash command here prefixed with `run: `
      - run: 
          name: building image & push
          command: |
            cd /home/circleci/project/src/air
            echo $DOCKER_PASS | docker login --username $DOCKER_USER --password-stdin
            docker build -t $DOCKER_USER/go-bumblebee-air:$CIRCLE_BRANCH .
            docker push $DOCKER_USER/go-bumblebee-air:$CIRCLE_BRANCH

  build-spy:
    docker:
      # specify the version
      - image: circleci/golang:1.14.1

    working_directory: /go/src/github.com/cc4i/go-bumblebee
    steps:
      - checkout

      # specify any bash command here prefixed with `run: `
      - run: 
          name: building & test
          command: |
            which go
            echo $PATH
            cd /go/src/github.com/cc4i/go-bumblebee/src/spy
            ls -F
            make test

  build-spy-image:
    machine: true
    steps:
      - checkout

      # specify any bash command here prefixed with `run: `
      - run: 
          name: building image & push
          command: |
            cd /home/circleci/project/src/spy
            echo $DOCKER_PASS | docker login --username $DOCKER_USER --password-stdin
            docker build -t $DOCKER_USER/go-bumblebee-spy:$CIRCLE_BRANCH .
            docker push $DOCKER_USER/go-bumblebee-spy:$CIRCLE_BRANCH
  build-bee:
    docker:
      # specify the version
      - image: circleci/node:13.12-browsers

    working_directory: ~/go-bumblebee
    steps:
      - checkout

      # specify any bash command here prefixed with `run: `
      - run: 
          name: building & test
          command: |
            cd ~/go-bumblebee/src/bee
            npm install 
            npm install @angular/cli@9.1.1
            export PATH=~/go-bumblebee/src/bee/node_modules/@angular/cli/bin:$PATH
            ng test --watch=false

  build-bee-image:
    machine: true
    steps:
      - checkout

      # specify any bash command here prefixed with `run: `
      - run: 
          name: building image & push
          command: |
            cd /home/circleci/project/src/bee
            echo $DOCKER_PASS | docker login --username $DOCKER_USER --password-stdin
            docker build -t $DOCKER_USER/go-bumblebee-bee:$CIRCLE_BRANCH .
            docker push $DOCKER_USER/go-bumblebee-bee:$CIRCLE_BRANCH

workflows:
  version: 2
  build-workflow:
    jobs:
      - build-gate
      - build-gate-image:
          requires:
            - build-gate

      - build-air
      - build-air-image:
          requires:
            - build-air

      - build-spy
      - build-spy-image:
          requires:
            - build-spy

      - build-bee
      - build-bee-image:
          requires:
            - build-bee
